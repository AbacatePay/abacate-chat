---
description: Apply configuration guidelines when setting up projects to ensure consistent tooling, build processes, and development environments
globs: *.{json,js,ts,config.*}
alwaysApply: false
---

# Configuration Guidelines

<version>1.0.0</version>

## Context

- Applies to project setup, build configuration, and development tooling
- Ensures consistent development experience across team members
- Optimizes build performance and deployment processes

## Requirements

### Project Structure

- Use `src/` directory for all source code
- Separate concerns with clear folder organization (`components/`, `hooks/`, `lib/`, `styles/`)
- Place configuration files in project root
- Use `public/` for static assets only

### Package Management

- Use pnpm for dependency management and workspace support
- Pin exact versions for critical dependencies
- Separate devDependencies from production dependencies
- Regular security audits with `pnpm audit`

### TypeScript Configuration

- Enable strict mode with `"strict": true`
- Use path mapping for clean imports (`@/` prefix)
- Configure proper module resolution for Next.js
- Enable incremental compilation for faster builds

### Build and Development

- Configure Next.js with App Router for modern routing
- Use environment variables for configuration (`NEXT_PUBLIC_` prefix for client-side)
- Implement proper error boundaries and logging
- Configure bundle analysis for performance monitoring

### Code Quality Tools

- ESLint with TypeScript and React rules
- Prettier for consistent code formatting
- Husky for git hooks and pre-commit checks
- Lint-staged for efficient pre-commit linting

### Testing Setup

- Jest for unit and integration testing
- React Testing Library for component testing
- Playwright for end-to-end testing
- Coverage reporting with minimum thresholds

## Examples

<example>
  // tsconfig.json - Proper TypeScript configuration
  {
    "compilerOptions": {
      "target": "ES2017",
      "lib": ["dom", "dom.iterable", "es6"],
      "allowJs": true,
      "skipLibCheck": true,
      "strict": true,
      "noEmit": true,
      "esModuleInterop": true,
      "module": "esnext",
      "moduleResolution": "bundler",
      "resolveJsonModule": true,
      "isolatedModules": true,
      "jsx": "preserve",
      "incremental": true,
      "plugins": [
        {
          "name": "next"
        }
      ],
      "baseUrl": ".",
      "paths": {
        "@/*": ["./src/*"],
        "@/components/*": ["./src/components/*"],
        "@/lib/*": ["./src/lib/*"],
        "@/hooks/*": ["./src/hooks/*"]
      }
    },
    "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
    "exclude": ["node_modules"]
  }

// next.config.js - Optimized Next.js configuration
/\*_ @type {import('next').NextConfig} _/
const nextConfig = {
experimental: {
typedRoutes: true,
},
images: {
formats: ['image/webp', 'image/avif'],
deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
},
compress: true,
poweredByHeader: false,
reactStrictMode: true,
swcMinify: true,
env: {
CUSTOM_KEY: process.env.CUSTOM_KEY,
},
async headers() {
return [
{
source: '/(.\*)',
headers: [
{
key: 'X-Frame-Options',
value: 'DENY',
},
{
key: 'X-Content-Type-Options',
value: 'nosniff',
},
],
},
]
},
}

module.exports = nextConfig

// package.json - Proper scripts and dependencies structure
{
"name": "my-app",
"version": "1.0.0",
"private": true,
"scripts": {
"dev": "next dev",
"build": "next build",
"start": "next start",
"lint": "next lint",
"lint:fix": "next lint --fix",
"type-check": "tsc --noEmit",
"test": "jest",
"test:watch": "jest --watch",
"test:coverage": "jest --coverage",
"e2e": "playwright test",
"analyze": "ANALYZE=true next build",
"clean": "rm -rf .next out node_modules/.cache"
},
"dependencies": {
"next": "^15.0.0",
"react": "^19.0.0",
"react-dom": "^19.0.0"
},
"devDependencies": {
"@types/node": "^20.0.0",
"@types/react": "^19.0.0",
"@types/react-dom": "^19.0.0",
"eslint": "^8.57.0",
"eslint-config-next": "^15.0.0",
"typescript": "^5.0.0"
},
"engines": {
"node": ">=18.0.0",
"pnpm": ">=8.0.0"
},
"packageManager": "pnpm@8.15.0"
}

// .eslintrc.json - Comprehensive linting configuration
{
"extends": [
"next/core-web-vitals",
"@typescript-eslint/recommended",
"prettier"
],
"parser": "@typescript-eslint/parser",
"plugins": ["@typescript-eslint"],
"rules": {
"@typescript-eslint/no-unused-vars": "error",
"@typescript-eslint/no-explicit-any": "warn",
"@typescript-eslint/consistent-type-imports": "error",
"prefer-const": "error",
"no-var": "error"
},
"parserOptions": {
"ecmaVersion": "latest",
"sourceType": "module"
}
}

// Environment variables structure
// .env.local
NEXT_PUBLIC_APP_URL=http://localhost:3000
NEXT_PUBLIC_API_URL=https://api.example.com
DATABASE_URL=postgresql://user:pass@localhost:5432/db
JWT_SECRET=your-secret-key
</example>

<example type="invalid">
  // Poor configuration without proper structure
  {
    "compilerOptions": {
      "strict": false, // Disabling strict mode
      // Missing path mapping and proper module resolution
    }
  }

// Unsafe Next.js configuration
const nextConfig = {
// No security headers
// No image optimization
// No proper environment variable handling
}
</example>
